class Solution {
public:
    
     vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        
        if(nums.size()==0){
            return ans;
           }
         
        if(nums.size()<3){
            return ans;
        }
        if(nums.size()==3){
            if(nums[0]+nums[1]+nums[2]==0){
               ans.push_back(vector<int>{nums[0],nums[1],nums[2]});
                }
            return ans;
        }
         
        set<vector<int>> temp;  //temp set to allow only unique triplets
        
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<nums.size()-2;i++){
          int y=-nums[i];     //y= -nums[i] because nums[i]+nums[low]+nums[high]=0 so nums[low]+nums[high]=
                               //    0 - nums[i]
            int low=i+1;
            int high=nums.size()-1;
            while(low < high){
                if(nums[low]+nums[high]==y){
                   temp.insert(vector<int>{nums[i],nums[low],nums[high]});
                    low++;            
                    high--;
                }
                else if(nums[low]+nums[high] > y){
                    high--;
                }
                else{
                    low++;
                }
            }
        }
        //including vector from temp to ans;
        for(auto it=temp.begin();it!=temp.end();it++){
            ans.push_back(*it);
        }
        
        return ans;
    }
};
